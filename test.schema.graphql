"""
A simplified GraphQL schema demonstrating all type system features
"""

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# Custom scalar
scalar DateTime

# Custom directive
directive @auth(
  requires: Role = ADMIN
) on FIELD_DEFINITION | OBJECT

# Enum type
enum Role {
  ADMIN
  USER
  GUEST
}

# Input object type
input UserInput {
  name: String!
  email: String!
  role: Role = USER
}

# Interface
interface Node {
  id: ID!
}

# Interface with fields
interface Timestamped {
  createdAt: DateTime!
  updatedAt: DateTime
}

# Union type
union SearchResult = User | Post | Comment

# Object implementing multiple interfaces
type User implements Node & Timestamped {
  id: ID!
  name: String!
  email: String!
  role: Role!
  posts: [Post!]
  createdAt: DateTime!
  updatedAt: DateTime
}

# Object with various field types
type Post implements Node & Timestamped {
  id: ID!
  title: String!
  content: String
  published: Boolean!
  author: User!
  comments: [Comment!]!
  tags: [String!]
  createdAt: DateTime!
  updatedAt: DateTime
}

# Another object type
type Comment implements Node & Timestamped {
  id: ID!
  text: String!
  author: User!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime
}

# Root query type
type Query {
  node(id: ID!): Node
  user(id: ID!): User
  users(limit: Int = 10): [User!]!
  post(id: ID!): Post
  posts(authorId: ID, tags: [String!]): [Post!]!
  search(term: String!): [SearchResult!]! @auth
}

# Root mutation type
type Mutation {
  createUser(input: UserInput!): User! @auth
  updateUser(id: ID!, input: UserInput!): User! @auth
  createPost(title: String!, content: String, authorId: ID!): Post!
  createComment(postId: ID!, text: String!, authorId: ID!): Comment!
}

# Root subscription type
type Subscription {
  userCreated: User!
  postCreated: Post!
  commentAdded(postId: ID): Comment!
}